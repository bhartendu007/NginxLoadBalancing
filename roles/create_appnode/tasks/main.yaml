---
#- set_fact:
#    basic_firewall: sg-92ae43d9
-   name: Create an EC2 instance for app 
    ec2:
        key_name: "{{ project_name }}-key"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        group_id: "{{ basic_firewall.group_id }}"
        #group_id: "{{ basic_firewall }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami }}"
        user_data: |
                   #!/bin/sh
                   sudo apt-get install python -y
        wait: yes
        instance_tags:
            Name: App Server
            env: app
        count_tag: 
            Name: App Server
            env: app
        exact_count: 2
    register: ec2

- name: Add new instance to host group
  local_action: add_host hostname={{ item.public_dns_name }} groupname=ec2group
  with_items: "{{ ec2.tagged_instances }}"

- name: create template from old hosts file
  copy:  
    src: inventory/hosts 
    dest: roles/create_appnode/templates/updated_inventory.j2

- name: Generate inventory_output_file
  template:
    src: updated_inventory.j2
    dest: inventory/hosts

- name: Add instance to local host group
  lineinfile: 
    path: "{{ inventory_output_file }}"
    insertafter: EOF
    line: "[app-instances]"

- name: Add instance to local host group
  lineinfile: 
    path: "{{ inventory_output_file }}"
    insertafter: EOF
    line: "{{ item.public_ip }} ansible_hostname={{ item.public_dns_name }} ansible_ssh_private_key_file=./{{ project_name }}-key.pem"
  with_items: "{{ ec2.tagged_instances }}"

- name: Wait for the instances to boot by checking the ssh port wait_for
  wait_for: host="{{ item.public_ip }}" port=22 delay=60 timeout=320 state=started
  with_items: "{{ ec2.tagged_instances }}"

- meta: refresh_inventory
